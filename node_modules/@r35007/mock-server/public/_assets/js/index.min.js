'use strict';
let resources = {},
  rewriters = {},
  formValues = {},
  totalRoutesCount = 0,
  filteredRoutesCount = 0;
const homePageRoutes = ['/_assets', '/_db/:id?', '/_rewriters', '/_store', '/_reset/:id?', '/_routes'],
  $pageLoader = document.getElementById('page-loader'),
  $darkModeSwitch = document.getElementById('darkMode-switch'),
  $container = document.getElementById('container'),
  $resourcesContainer = document.getElementById('resources-container'),
  $dataContainer = document.getElementById('data-container'),
  $rewritersContainer = document.getElementById('rewriters-container'),
  $resourcesList = document.getElementById('resources-list'),
  $rewritersList = document.getElementById('rewriters-list'),
  $resourcesCount = document.getElementById('resources-count'),
  $search = document.getElementById('search'),
  $frameLoader = document.getElementById('iframe-loader'),
  $iframeData = document.getElementById('iframe-data'),
  $download = document.getElementById('download'),
  $routeModal = document.getElementById('routeModal'),
  $modalTitle = document.getElementById('modal-title'),
  $routeConfigForm = document.getElementById('route-config-form'),
  $routeConfig = document.getElementById('routeConfig'),
  $formError = document.getElementById('form-error'),
  $toast = document.getElementById('toast'),
  $resourceRedirect = document.getElementById('resource-redirect'),
  $iframeUrl = document.getElementById('iframe-url');
let $routeBsModal, $bsToast;
try {
  ($routeBsModal = new bootstrap.Modal($routeModal)), ($bsToast = new bootstrap.Toast($toast, { animation: !0, delay: 2e3 }));
} catch (e) {
  console.log(e), ($routeBsModal = {}), ($bsToast = {});
}
function getBadges(e) {
  return e.map((e) => `<h6 class="m-0">\n        <span class="badge bg-secondary fw-normal">${e}</span>\n      </h6>`);
}
function parseHTML(e) {
  var t = document.createElement('template');
  return (t.innerHTML = e), t.content;
}
function findEntry(e) {
  return (
    Object.entries(resources).find((t) => {
      let [o, n] = t;
      return n.id == e;
    }) || []
  );
}
function allowTabSpaces(e, t) {
  if ('Tab' == e.key) {
    e.preventDefault();
    var o = t.selectionStart,
      n = t.selectionEnd;
    (t.value = t.value.substring(0, o) + '\t' + t.value.substring(n)), (t.selectionStart = t.selectionEnd = o + 1);
  }
}
function showToast(e) {
  var t, o;
  ($toast.querySelector('.toast-body').textContent = e),
    null === (t = $bsToast) || void 0 === t || null === (o = t.show) || void 0 === o || o.call(t);
}
function parseJson(e) {
  let t;
  try {
    t = JSON.parse(e || '');
  } catch {
    t = null == e ? void 0 : e.trim();
  }
  return t;
}
function orderRouteConfig(e) {
  const t = JSON.parse(JSON.stringify(e)),
    o = Object.keys(e);
  o.forEach((t) => delete e[t]);
  return (
    new Set([
      'id',
      'description',
      'middlewares',
      'statusCode',
      'delay',
      'fetchCount',
      'skipFetchError',
      'mock',
      'fetch',
      'fetchError',
      'store',
      'fetchData',
      'status',
      'message',
      'isImage',
      'isError',
      'headers',
      'stack',
      'response',
      '_request',
      '_isFile',
      '_extension',
      ...o,
    ]).forEach((o) => (e[o] = t[o])),
    e
  );
}
function random(e, t) {
  return Math.floor(Math.random() * (t - e + 1) + e);
}
function setFormDataType(e, t) {
  document.getElementById(`${e}-badge`).innerHTML = t;
}
function togglePageLoader(e) {
  e
    ? ($pageLoader.classList.add('d-block'), $pageLoader.classList.remove('d-none'))
    : ($pageLoader.classList.add('d-none'), $pageLoader.classList.remove('d-block'));
}
async function request(e, t) {
  togglePageLoader(!0);
  const o = await window.fetch(e, t).then((e) => e.json());
  return togglePageLoader(!1), o;
}
$darkModeSwitch.checked = 'dark' == theme;
const set = (e, t, o) => (
  Object(e) !== e ||
    (Array.isArray(t) || (t = t.toString().match(/[^.[\]]+/g) || []),
    (t.slice(0, -1).reduce((e, o, n) => (Object(e[o]) === e[o] ? e[o] : (e[o] = Math.abs(t[n + 1]) >> 0 == +t[n + 1] ? [] : {})), e)[
      t[t.length - 1]
    ] = o)),
  e
);
function toggleDataContainer(e) {
  $dataContainer.style.display = e ? 'block' : 'none';
}
function dragElement(e) {
  var t;
  function o(o) {
    var n = { x: o.clientX - t.e.clientX, y: o.clientY - t.e.clientY };
    const r = Math.min(Math.max(n.x, -t.resourcesContainerWidth), t.dataContainerWidth);
    let a = t.dataContainerWidth - r,
      s = (t.dataContainerWidth / 100) * 35;
    ($dataContainer.style.display = a < s ? 'none' : 'block'),
      (n.x = Math.min(Math.max(n.x, -t.resourcesContainerWidth), t.dataContainerWidth)),
      (e.style.left = t.offsetLeft + n.x + 'px'),
      ($dataContainer.style.width = a + 'px');
  }
  e.onmousedown = function (n) {
    (t = {
      e: n,
      offsetLeft: e.offsetLeft,
      offsetTop: e.offsetTop,
      resourcesContainerWidth: $resourcesContainer.offsetWidth,
      dataContainerWidth: $dataContainer.offsetWidth,
    }),
      ($resourcesContainer.style.pointerEvents = 'none'),
      ($dataContainer.style.pointerEvents = 'none'),
      (document.onmousemove = o),
      (document.onmouseup = () => {
        ($resourcesContainer.style.pointerEvents = 'all'),
          ($dataContainer.style.pointerEvents = 'all'),
          (document.onmousemove = document.onmouseup = null);
      });
  };
}
function toggleInfoBox(e) {
  const t = document.getElementById(e);
  t.classList.contains('expanded') ? hideInfoBox(t) : showInfoBox(t, e);
}
function hideInfoBox(e) {
  e.classList.remove('expanded'), e.removeChild(e.lastElementChild);
}
function showInfoBox(e, t) {
  var o;
  const [n, r] = findEntry(t),
    a = (null == r ? void 0 : r._default) || r.directUse;
  (r.middlewares = null === (o = r.middlewares) || void 0 === o ? void 0 : o.filter(Boolean)),
    e.classList.add('expanded'),
    e.appendChild(
      parseHTML(
        `\n    <div class="info-box position-relative overflow=hidden">\n      <div id="loader-${t.replace(
          /\=/g,
          ''
        )}" class="backdrop d-none">\n        <div class="spinner-border" role="status">\n          <span class="visually-hidden">Loading...</span>\n        </div>\n      </div>\n      <div class="route-config p-1">${fieldSet(
          r,
          r
        )}</div>\n      ${
          a
            ? ''
            : `<div class="actions justify-content-end p-2" style="display: flex">\n          <span role="button" class="px-2 pe-1 action-icon" title="reset" onclick="reset('${r.id}')"><i>Reset</i></span>\n          <span role="button" class="px-2 pe-1 action-icon" title="edit" onclick="openModal(this)" data-type="update" data-id="${r.id}"><i>Edit</i></span>\n          <span role="button" class="px-2 pe-1 action-icon" title="clone" onclick="openModal(this)" data-type="clone" data-id="${r.id}"><i>Clone</i></span>\n          <span role="button" class="px-2 pe-1 action-icon" title="refresh" onclick="refresh('${r.id}')"><i>Refresh</i></span>\n        </div>`
        }\n    </div>`
      )
    );
}
async function reset(e) {
  const t = document.querySelector(`.info-box #loader-${e.replace(/\=/g, '')}`);
  t.classList.remove('d-none'), t.classList.add('d-block');
  const o = await window.fetch(localhost + '/_reset/' + e).then((e) => e.json()),
    [n, r] = Object.entries(o)[0];
  (resources[n] = r), toggleInfoBox(e), toggleInfoBox(e), showToast(`${n} Restored Successfully`);
}
async function refresh(e) {
  const t = document.querySelector(`.info-box #loader-${e.replace(/\=/g, '')}`);
  t.classList.remove('d-none'), t.classList.add('d-block');
  const o = await window.fetch(localhost + '/_db/' + e).then((e) => e.json()),
    [n, r] = Object.entries(o)[0];
  (resources[n] = r), toggleInfoBox(e), toggleInfoBox(e), showToast(`${n} Refreshed Successfully`);
}
function fieldSet(e, t) {
  const o = t.id;
  return Object.entries(orderRouteConfig(e))
    .map((e) => {
      let [n, r] = e;
      return 'fetchData' === n && Object.keys(r || {}).length
        ? `\n      <div class="row px-3">\n          <label class="key col col-form-label p-0">\n            <button class="btn btn-white fw-semibold border-0 p-0 shadow-none" type="button" \n            data-bs-toggle="collapse" data-bs-target="#id-${o.replace(
            /\=/g,
            ''
          )}_${n}" \n            aria-expanded="false" aria-controls="id-${o.replace(
            /\=/g,
            ''
          )}_${n}">\n              ${n} â–¸\n            </button>   \n          </label>\n          <div class="val col-12 collapse ps-0" id="id-${o.replace(
            /\=/g,
            ''
          )}_${n}">${fieldSet(r, t)}</div>\n      </div>`
        : getKeyVal(n, r, t);
    })
    .join('');
}
function getKeyVal(e, t, o) {
  var n;
  const r = o.id;
  return '_default' === e || '_config' === e || null == t || ('string' == typeof t && !t.trim().length)
    ? ''
    : Array.isArray(t) && t.every((e) => 'string' == typeof e)
    ? `\n      <div class="row px-3">\n        <label class="key col col-form-label p-0">${e} :</label>\n        <div class="val col d-flex flex-wrap align-items-center" style="grid-gap:.5rem">\n        ${getBadges(
        t
      ).join('')}\n        </div>\n      </div>`
    : 'object' == typeof t && !Array.isArray(t) && 'Buffer' === t.type && null !== (n = o._request) && void 0 !== n && n.url
    ? `\n    <div class="row px-3">\n      <label class="key col col-form-label p-0">${e} :</label>\n      <div class="val col">\n        <div class="img"><img src="${o._request.url}" /></div>\n      </div>\n    </div>`
    : textAreaKeys.includes(e) || 'object' == typeof t
    ? `\n    <div class="row px-3">\n      <label class="key col col-form-label p-0 w-100" style="max-width: 100%">\n        <button class="btn btn-white fw-semibold border-0 p-0 shadow-none" type="button" \n        data-bs-toggle="collapse" data-bs-target="#id-${r.replace(
        /\=/g,
        ''
      )}_${e}" \n        aria-expanded="false" aria-controls="id-${r.replace(
        /\=/g,
        ''
      )}_${e}">\n          ${e} â–¸\n        </button>  \n      </label>\n      <div class="val col-12 collapse p-0 mt-2 position-relative" id="id-${r.replace(
        /\=/g,
        ''
      )}_${e}">\n        <span style="top: -1.8rem; right: 1rem;" class="position-absolute badge bg-secondary ms-4">${
        'object' == typeof t ? 'JSON' : 'STRING'
      }</span>\n        <textarea class="form-control" rows="5">${
        'object' == typeof t ? JSON.stringify(t, null, 2) : t
      }</textarea>\n      </div>\n    </div>`
    : `\n    <div class="row px-3">\n      <label class="key col col-form-label p-0">${e} :</label>\n      <div class="val col">${t}</div>\n    </div>`;
}
dragElement(document.getElementById('separator'));
const textAreaKeys = ['fetch', 'mock', 'response', 'store', '_request', 'stack'];
function openModal(e) {
  var t, o;
  (formValues = {}), hideFormError(), $routeConfigForm.reset();
  const n = e.getAttribute('data-type'),
    r = e.getAttribute('data-id');
  setFormDataType('mock', ''),
    setFormDataType('fetch', ''),
    setFormDataType('store', ''),
    setFormDataType('headers', ''),
    setFormDataType('fetchData.response', ''),
    setFormDataType('fetchData.headers', ''),
    'update' === n && updateRoute(r),
    'clone' === n && cloneRoute(r),
    'add' === n && addRoute(),
    null === (t = $routeBsModal) || void 0 === t || null === (o = t.show) || void 0 === o || o.call(t);
}
async function updateRoute(e) {
  var t;
  const o = await request(localhost + '/_db/' + e),
    [n, r = {}] = (null === (t = Object.entries(o)) || void 0 === t ? void 0 : t[0]) || [];
  ($routeConfig.value = JSON.stringify(r)),
    $routeConfigForm.classList.add('update-form'),
    $routeConfigForm.classList.remove('add-form'),
    ($modalTitle.textContent = n),
    setFormValues(r, n);
}
function addRoute() {
  ($routeConfig.value = JSON.stringify({ routePath: $search.value })),
    ($routeConfigForm.routePath.value = $search.value || ''),
    (formValues.routePath = $search.value || ''),
    $routeConfigForm.classList.remove('update-form'),
    $routeConfigForm.classList.add('add-form'),
    ($modalTitle.textContent = 'Add new Route');
}
async function cloneRoute(e) {
  var t;
  const o = await request(localhost + '/_db/' + e),
    [n, r = {}] = (null === (t = Object.entries(o)) || void 0 === t ? void 0 : t[0]) || [];
  delete r.id,
    ($routeConfig.value = JSON.stringify(r)),
    $routeConfigForm.classList.remove('update-form'),
    $routeConfigForm.classList.add('add-form'),
    ($modalTitle.textContent = `Clone: ${n}`),
    setFormValues(r, n);
}
function setFormValues(e, t) {
  const {
      id: o,
      description: n,
      statusCode: r,
      delay: a,
      fetch: s,
      fetchCount: l,
      mockFirst: i,
      skipFetchError: c,
      mock: d,
      store: u,
      headers: f,
      middlewares: m,
      fetchData: p = {},
    } = e,
    h = p.response,
    y = p.headers;
  ($routeConfigForm.id.value = o || ''),
    ($routeConfigForm.routePath.value = t || ''),
    ($routeConfigForm.statusCode.value = r ?? ''),
    ($routeConfigForm.delay.value = a ?? ''),
    ($routeConfigForm.fetchCount.value = l ?? ''),
    ($routeConfigForm.skipFetchError.checked = c + '' == 'true'),
    ($routeConfigForm.mockFirst.checked = i + '' == 'true'),
    ($routeConfigForm.description.value = n ?? ''),
    ($routeConfigForm.middlewares.value = (null == m ? void 0 : m.join(',')) ?? ''),
    ($routeConfigForm.mock.value = 'object' == typeof d ? JSON.stringify(d, null, 8) : d ?? ''),
    ($routeConfigForm.fetch.value = 'object' == typeof s ? JSON.stringify(s, null, 8) : s ?? ''),
    ($routeConfigForm.store.value = 'object' == typeof u ? JSON.stringify(u, null, 8) : u ?? ''),
    ($routeConfigForm.headers.value = 'object' == typeof f ? JSON.stringify(f, null, 8) : f ?? ''),
    ($routeConfigForm['fetchData.response'].value = 'object' == typeof h ? JSON.stringify(h, null, 8) : h ?? ''),
    ($routeConfigForm['fetchData.headers'].value = 'object' == typeof h ? JSON.stringify(h, null, 8) : h ?? ''),
    ($routeConfigForm['fetchData.statusCode'].value = p.statusCode ?? ''),
    setFormDataType('mock', 'object' == typeof d ? 'JSON' : 'STRING'),
    setFormDataType('fetch', 'object' == typeof s ? 'JSON' : 'STRING'),
    setFormDataType('store', 'object' == typeof u ? 'JSON' : 'STRING'),
    setFormDataType('headers', 'object' == typeof f ? 'JSON' : 'STRING'),
    setFormDataType('fetchData.response', 'object' == typeof h ? 'JSON' : 'STRING'),
    setFormDataType('fetchData.headers', 'object' == typeof y ? 'JSON' : 'STRING');
}
async function updateRouteConfig(e) {
  var t, o, n, r;
  const a = parseJson($routeConfig.value) || {},
    s = null === (t = $routeConfigForm.routePath) || void 0 === t || null === (o = t.value) || void 0 === o ? void 0 : o.trim();
  delete e.middlewares;
  const l = { ...(a.fetchData || {}), ...(e.fetchData || {}) },
    i = { [s]: { ...e, ...(Object.keys(l) ? { fetchData: l } : {}) } },
    c = await request(localhost + '/_db/', {
      method: 'PUT',
      headers: { Accept: 'application/json', 'Content-Type': 'application/json' },
      body: JSON.stringify(i),
    });
  Object.entries(c).forEach((e) => {
    let [t, o] = e;
    resources[t] = o;
  }),
    createResourcesList(resources),
    null === (n = $routeBsModal) || void 0 === n || null === (r = n.hide) || void 0 === r || r.call(n),
    showToast(`${s} Updated Successfully`);
}
async function addNewRoute(e) {
  var t, o, n, r, a, s, l;
  const i = parseJson($routeConfig.value) || {},
    c = null === (t = $routeConfigForm.routePath) || void 0 === t || null === (o = t.value) || void 0 === o ? void 0 : o.trim(),
    d =
      (null === (n = $routeConfigForm.middlewares) || void 0 === n || null === (r = n.value) || void 0 === r
        ? void 0
        : r.split(',').filter(Boolean)) || [],
    u = { ...(i.fetchData || {}), ...(e.fetchData || {}) },
    f = { ...i, ...e, ...(d.length ? { middlewares: d } : {}), ...(Object.keys(u) ? { fetchData: u } : {}) };
  if ((delete f.routePath, delete f.id, null == c || null === (a = c.trim()) || void 0 === a || !a.length)) {
    return showFormError('Please Provide Route Path'), !1;
  }
  if (Object.keys(resources).find((e) => e === (null == c ? void 0 : c.trim()))) {
    return showFormError('Route Path already exist. Please Provide new Route Path'), !1;
  }
  const m = { [c]: f },
    p = await request(localhost + '/_db', {
      method: 'POST',
      headers: { Accept: 'application/json', 'Content-Type': 'application/json' },
      body: JSON.stringify(m),
    });
  Object.entries(p).forEach((e) => {
    let [t, o] = e;
    resources[t] = o;
  }),
    createResourcesList(resources),
    null === (s = $routeBsModal) || void 0 === s || null === (l = s.hide) || void 0 === l || l.call(s),
    showToast(`${c} Added Successfully`);
}
function hideFormError() {
  ($formError.style.display = 'none'), ($formError.textContent = '');
}
function showFormError(e) {
  ($formError.style.display = 'block'), ($formError.innerHTML = e), ($routeModal.querySelector('.modal-body').scrollTop = 0);
}
async function init() {
  $search.value = '';
  try {
    resources = await request(localhost + '/_db');
  } catch (e) {
    console.log(e);
  }
  try {
    rewriters = await request(localhost + '/_rewriters');
  } catch (e) {
    console.error(e);
  }
  createResourcesList(resources),
    Object.entries(rewriters).length && createRewritersList(rewriters),
    showToast('Resources Loaded Successfully');
}
function setHomePageRoutes(e) {
  const t = Object.keys(e);
  t.includes('/_db') ||
    (e['/_db'] = { id: window.btoa('/_db'), description: 'Get Db snapshot. Use ?_clean=true to get a refined clean Db.', _default: !0 }),
    t.includes('/_routes') || (e['/_routes'] = { id: window.btoa('/_routes'), description: 'Get List of routes used.', _default: !0 }),
    t.includes('/_store') || (e['/_store'] = { id: window.btoa('/_store'), description: 'Get Store values.', _default: !0 });
}
function createResourcesList(e) {
  const t = [];
  for ($resourcesList.querySelectorAll('li.expanded').forEach((e) => t.push(e.id)); $resourcesList.lastElementChild; )
    $resourcesList.removeChild($resourcesList.lastElementChild);
  setHomePageRoutes(e), ($resourcesList.innerHTML = ResourceList(e)), t.forEach(toggleInfoBox), filterRoutes();
}
function createRewritersList(e) {
  ($rewritersList.innerHTML = Object.entries(e)
    .map((e) => {
      let [t, o] = e;
      return `\n    <li class="nav-item w-100 mt-1 overflow-hidden d-block">\n      <div class="header d-flex align-items-center w-100" style='filter:grayscale(0.6)'">\n        <a class="nav-link py-2 px-4">\n          <span class="route-path" style="word-break:break-all">${t}</span>\n          <code class="px-2">â‡¢</code>\n          <span class="route-path" style="word-break:break-all">${o}</span>\n        </a>\n      </div>\n    </li>\n    `;
    })
    .join('')),
    ($rewritersContainer.style.display = 'block');
}
function ResourceList(e) {
  return (
    (totalRoutesCount = Object.keys(e).length),
    setRoutesCount(totalRoutesCount),
    `\n    ${Object.entries(e)
      .map((e) => ResourceItem(...e))
      .join(
        ''
      )}\n    <li id="no-resource" class="nav-item w-100 mt-2" style="display: none">\n      <span class="p-2 px-3 d-block bg-light text-center">\n        <span> No Resources Found</span>\n      </span>\n    </li>\n    <li id="add-resource" role="button" class="nav-item w-100 mt-2 d-block" data-type="add" onclick="openModal(this)">\n      <span class="nav-link p-2 px-3 me-3 text-center">\n        <span> Click here To add new Resource </span>\n      </span>\n    </li>\n    <li class="nav-item w-100 mt-2 d-block">\n      <div class="d-flex align-items-center justify-content-end">\n        <button style="margin-top:-3.6rem" \n        class="btn btn-secondary shadow-none btn-sm" \n        onclick="resetAll()"> Reset Resources</button>\n      </div>\n    </li>\n  `
  );
}
function ResourceItem(e, t) {
  const o = t._default;
  return `\n  <li id="${
    t.id
  }" class="nav-item w-100 mt-1 overflow-hidden" style="display: block">\n    <div class="header d-flex align-items-center w-100" style="${
    o ? 'filter:grayscale(0.6)' : 'filter:grayscale(0.1)'
  }">\n      <span role="button" class="info-icon action-icon" onclick="toggleInfoBox('${
    t.id
  }')"><span class="icon">i</span></span>  \n      <a class="nav-link py-2 pe-3 ps-0" onclick="setIframeData(event, this,'${e}')" type="button">\n        <span class="route-path" style="word-break:break-all">${e}</span>\n      </a>\n    </div>\n  </li>\n`;
}
function getUrl(e) {
  if (e.startsWith('http')) return e;
  if (null == e || !e.trim().length) return localhost;
  let t = e
    .split('/')
    .map((e) => (e.indexOf(':') >= 0 ? (e.indexOf('?') >= 0 ? '' : random(1, 100)) : e))
    .join('/');
  t = t.replace(/\/$/gi, '');
  return localhost + t;
}
async function setIframeData(e, t, o) {
  if (e.ctrlKey || e.metaKey) {
    const e = getUrl(o);
    window.open(e, '_blank');
  } else
    try {
      clearActiveLink(), t.parentNode.classList.add('active');
      try {
        $iframeData.contentWindow.document.open(), $iframeData.contentWindow.document.close();
      } catch {}
      ($frameLoader.style.display = 'grid'), ($dataContainer.style.display = 'block'), setIFrameSrc(o);
    } catch (e) {
      console.error(e);
    }
}
function clearActiveLink() {
  const e = $resourcesList.querySelectorAll('li .header');
  for (let t = 0; t < e.length; t++) e[t].classList.remove('active');
}
function setIFrameSrc(e) {
  const t = getUrl(e);
  null != e && e.trim().length
    ? (($resourceRedirect.href = t), ($iframeUrl.value = t), ($iframeData.src = t), ($download.href = t))
    : (($resourceRedirect.href = t), ($iframeUrl.value = t), ($iframeData.src = ''), ($download.href = ''));
}
function filterRoutes() {
  let e, t, o, n;
  for (
    e = $search.value.toUpperCase(), t = $resourcesList.querySelectorAll('.route-path'), filteredRoutesCount = 0, o = 0;
    o < t.length;
    o++
  )
    (n = t[o].textContent || t[o].innerText),
      n.toUpperCase().indexOf(e) > -1
        ? ((t[o].parentNode.parentNode.parentNode.style.display = 'block'), filteredRoutesCount++)
        : (t[o].parentNode.parentNode.parentNode.style.display = 'none');
  setRoutesCount(totalRoutesCount, filteredRoutesCount, e), showNoResource(!filteredRoutesCount);
}
function setRoutesCount(e, t, o) {
  const n = null != o && o.length ? `${t} / ${e}` : e;
  $resourcesCount.innerHTML = n;
}
function showNoResource(e) {
  document.getElementById('no-resource').style.display = e ? 'block' : 'none';
}
async function resetAll() {
  (resources = await request(localhost + '/_reset')), showToast('Routes Restored Successfully'), createResourcesList(resources);
}
function setIframeSource(e, t) {
  if (13 === e || 'Enter' === e) {
    try {
      $iframeData.contentWindow.document.open(), $iframeData.contentWindow.document.close();
    } catch {}
    ($frameLoader.style.display = 'grid'), ($iframeData.src = t);
  }
  ($resourceRedirect.href = t), ($download.href = t);
}
init(),
  $iframeUrl.addEventListener('keyup', function (e) {
    let t;
    void 0 !== e.key ? (t = e.key) : void 0 !== e.keyIdentifier ? (t = e.keyIdentifier) : void 0 !== e.keyCode && (t = e.keyCode),
      setIframeSource(t, e.target.value);
  });
const scrollContainer = document.querySelector('#resources-container main');
scrollContainer.addEventListener('scroll', (e) => {
  const t = scrollContainer.querySelector('nav');
  scrollContainer.scrollTop > 0 ? (t.style.boxShadow = '0 8px 10px -11px #212121') : (t.style.boxShadow = 'none');
});
const modalTextControls = document.querySelectorAll('#route-config-form .form-control'),
  modalSwitchControls = document.querySelectorAll('#route-config-form .form-check-input');
modalTextControls.forEach((e) => {
  e.addEventListener('input', (e) => {
    let { target: t } = e;
    if (['mock', 'fetch', 'store', 'headers', 'fetchData.response', 'fetchData.headers'].includes(t.name)) {
      let e = 'JSON';
      try {
        const o = JSON.parse(t.value);
        set(formValues, t.name, o), (e = 'JSON');
      } catch (o) {
        const n = t.value;
        set(formValues, t.name, n), (e = 'STRING');
      }
      setFormDataType(t.name, e);
    } else {
      const e = t.value;
      set(formValues, t.name, e);
    }
  });
}),
  modalSwitchControls.forEach((e) => {
    e.addEventListener('click', (e) => {
      let { target: t } = e;
      const o = t.checked;
      set(formValues, t.name, o);
    });
  }),
  $routeConfigForm.addEventListener('submit', function (e) {
    var t, o, n, r;
    if ((e.preventDefault(), !Object.keys(formValues).length))
      return null === (n = $routeBsModal) || void 0 === n || null === (r = n.hide) || void 0 === r || r.call(n), showToast('No Changes');
    const a = null === (t = $routeConfigForm.id) || void 0 === t || null === (o = t.value) || void 0 === o ? void 0 : o.trim(),
      s = { _config: !0, ...formValues, id: a };
    s.id ? updateRouteConfig(s) : addNewRoute(s);
  }),
  $darkModeSwitch.addEventListener('click', function (e) {
    e.target.checked
      ? (localStorage.setItem('theme', 'dark'), (document.getElementsByTagName('html')[0].dataset.theme = 'dark'))
      : (localStorage.removeItem('theme'), (document.getElementsByTagName('html')[0].dataset.theme = ''));
  });
