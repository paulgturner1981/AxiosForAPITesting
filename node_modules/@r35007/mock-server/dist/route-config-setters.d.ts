import type { AxiosRequestConfig } from 'axios';
import type { DbMode } from './types/common.types';
import type * as UserTypes from './types/user.types';
interface Done {
    done: (param?: {
        log?: string | boolean;
    }) => {
        [key: string]: UserTypes.RouteConfig;
    };
}
export default class RouteConfigSetters implements Done {
    #private;
    routePath: string;
    db: {};
    constructor(routePath: string, routeMiddlewares: UserTypes.MiddlewareConfig[], dbMode: DbMode);
    id(value: string): this;
    description(value: string): this;
    send(value: any, dbMode?: DbMode): this;
    reply: (value: any, dbMode?: DbMode) => this;
    headers(key: string | object, value?: any): void;
    mock(value: any): this;
    fetch(value: string | AxiosRequestConfig): this;
    statusCode(value: number): this;
    status: (value: number) => this;
    delay(value: number): this;
    fetchCount(value: number): this;
    skipFetchError(value: boolean): this;
    mockFirst(value: boolean): this;
    directUse(value: boolean): this;
    done(): {};
}
export {};
