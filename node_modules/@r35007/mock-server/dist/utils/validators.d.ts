import type { DbMode, DbValidatorOptions, ValidatorOptions } from '../types/common.types';
import type * as ParamTypes from '../types/param.types';
import type * as UserTypes from '../types/user.types';
import type * as ValidTypes from '../types/valid.types';
export declare const getValidConfig: (config?: ParamTypes.Config, { root, mockServer }?: ValidatorOptions) => ValidTypes.Config;
export declare const getValidMiddlewares: (middlewares?: ParamTypes.Middlewares, { root, mockServer }?: ValidatorOptions) => ValidTypes.Middlewares;
export declare const getValidInjectors: (injectors?: ParamTypes.Injectors, { root, mockServer }?: ValidatorOptions) => ValidTypes.Injectors;
export declare const getValidStore: (store?: ParamTypes.Store, { root, mockServer }?: ValidatorOptions) => ValidTypes.Store;
export declare const getValidRewriters: (rewriters?: ParamTypes.Rewriters, { root, mockServer }?: ValidatorOptions) => ValidTypes.Rewriters;
export declare const getValidDb: (data?: ParamTypes.Db, { mockServer, injectors, root, reverse, dbMode, }?: DbValidatorOptions) => ValidTypes.Db;
export declare const getValidRouteConfig: (route: string, routeConfig: any, dbMode?: DbMode) => ValidTypes.RouteConfig;
export declare const getValidInjectorConfig: (routeConfig: UserTypes.InjectorConfig) => ValidTypes.InjectorConfig;
export declare const getValidRoute: (route: string) => string;
