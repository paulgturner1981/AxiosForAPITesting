import * as cjson from 'comment-json';
import type { DbMode, HAR, HarMiddleware, KIBANA, KibanaMiddleware } from '../types/common.types';
import type * as UserTypes from '../types/user.types';
import type * as ValidTypes from '../types/valid.types';
export declare const normalizeDb: (object: UserTypes.Db, dbMode?: DbMode) => UserTypes.Db;
export declare const getInjectedDb: (db: UserTypes.Db, injectors: ValidTypes.Injectors) => ValidTypes.Db;
export declare const getMatchedRoutesList: (routeToMatch: string, db: UserTypes.Db, exact?: boolean) => string[];
export declare const flatQuery: (data: any, isNumber?: boolean) => (string | number)[];
export declare const replaceObj: (oldObj: object, newObj: object) => void;
export declare const cleanObject: (obj: any) => void;
export declare const getCleanDb: (db: ValidTypes.Db | UserTypes.Db, dbMode?: DbMode) => UserTypes.Db;
export declare const cleanRouteConfig: (routeConfig: ValidTypes.RouteConfig | UserTypes.RouteConfig, dbMode?: DbMode) => UserTypes.RouteConfig;
export declare const isCollection: (arr: any[]) => boolean;
export declare const getURLPathName: (url?: string) => string;
export declare const getParsedJSON: (json?: string) => cjson.CommentJSONValue;
export declare const extractDbFromHAR: (har: HAR, harEntryCallback: HarMiddleware['harEntryCallback'], harDbCallback: HarMiddleware['harDbCallback'], iterateDuplicateRoutes?: boolean) => UserTypes.Db | undefined;
export declare const extractDbFromKibana: (kibana: KIBANA, kibanaHitsCallback: KibanaMiddleware['kibanaHitsCallback'], KibanaDbCallback: KibanaMiddleware['kibanaDbCallback'], iterateDuplicateRoutes?: boolean) => UserTypes.Db | undefined;
export declare const toBase64: (value?: string) => string;
export declare const interpolate: (object: object, format?: string) => any;
export declare const prefixed: (prefix: string, object: object) => object;
