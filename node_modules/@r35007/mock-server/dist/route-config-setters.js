"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _RouteConfigSetters_dbMode;
Object.defineProperty(exports, "__esModule", { value: true });
const _ = __importStar(require("lodash"));
const utils_1 = require("./utils");
class RouteConfigSetters {
    constructor(routePath, routeMiddlewares, dbMode) {
        _RouteConfigSetters_dbMode.set(this, void 0);
        this.db = {};
        this.reply = this.send;
        this.status = this.statusCode;
        this.routePath = routePath;
        __classPrivateFieldSet(this, _RouteConfigSetters_dbMode, dbMode, "f");
        this.db[routePath] = { _config: true, id: (0, utils_1.toBase64)(routePath) };
        if (routeMiddlewares.length) {
            this.db[routePath].middlewares = routeMiddlewares;
        }
    }
    id(value) {
        this.db[this.routePath].id = value;
        return this;
    }
    description(value) {
        this.db[this.routePath].description = value;
        return this;
    }
    send(value, dbMode = __classPrivateFieldGet(this, _RouteConfigSetters_dbMode, "f")) {
        let attribute = dbMode === 'fetch' ? 'fetch' : 'mock';
        if (dbMode === 'multi') {
            attribute = typeof value === 'string' ? 'fetch' : 'mock';
        }
        this.db[this.routePath][attribute] = value;
        return this;
    }
    headers(key, value) {
        if (_.isPlainObject(key)) {
            if (_.isPlainObject(this.db[this.routePath].headers)) {
                Object.entries(key).forEach(([headerName, value]) => {
                    this.db[this.routePath].headers[headerName] = value;
                });
            }
            else {
                this.db[this.routePath].headers = value;
            }
        }
        if (_.isString(key)) {
            if (_.isPlainObject(this.db[this.routePath].headers)) {
                this.db[this.routePath].headers[key] = value;
            }
            else {
                this.db[this.routePath].headers = { [key]: value };
            }
        }
    }
    mock(value) {
        this.db[this.routePath].mock = value;
        return this;
    }
    fetch(value) {
        this.db[this.routePath].fetch = value;
        return this;
    }
    statusCode(value) {
        this.db[this.routePath].statusCode = value;
        return this;
    }
    delay(value) {
        this.db[this.routePath].delay = value;
        return this;
    }
    fetchCount(value) {
        this.db[this.routePath].fetchCount = value;
        return this;
    }
    skipFetchError(value) {
        this.db[this.routePath].skipFetchError = value;
        return this;
    }
    mockFirst(value) {
        this.db[this.routePath].mockFirst = value;
        return this;
    }
    directUse(value) {
        this.db[this.routePath].directUse = value;
        return this;
    }
    done() {
        return this.db;
    }
}
exports.default = RouteConfigSetters;
_RouteConfigSetters_dbMode = new WeakMap();
