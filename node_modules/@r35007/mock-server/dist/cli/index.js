#! /usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const chalk_1 = __importDefault(require("chalk"));
const chokidar_1 = __importDefault(require("chokidar"));
const fs = __importStar(require("fs"));
const fsx = __importStar(require("fs-extra"));
const ora_1 = __importDefault(require("ora"));
const path = __importStar(require("path"));
const please_upgrade_node_1 = __importDefault(require("please-upgrade-node"));
const update_notifier_cjs_1 = __importDefault(require("update-notifier-cjs"));
const __1 = __importDefault(require("../"));
const utils_1 = require("../utils");
const argv_1 = __importDefault(require("./argv"));
const pkgStr = fs.readFileSync(path.join(__dirname, '../../package.json'), 'utf8');
const pkg = JSON.parse(pkgStr);
(0, update_notifier_cjs_1.default)({ pkg }).notify();
(0, please_upgrade_node_1.default)(pkg, {
    message: function (requiredVersion) {
        return chalk_1.default.red('Please upgrade Node.\n@r35007/mock-server requires at least version ' + chalk_1.default.yellow(requiredVersion) + ' of Node.');
    },
});
const getDataFromUrl = (root, data) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        if (!data)
            return;
        if (data.startsWith('http')) {
            const spinner = !global.quiet ? (0, ora_1.default)('GET: ' + chalk_1.default.gray(data)).start() : false;
            try {
                const response = yield axios_1.default.get(data).then((resp) => resp.data);
                spinner && spinner.stopAndPersist({ symbol: chalk_1.default.green('✔'), text: chalk_1.default.green('GET: ') + chalk_1.default.gray(data) });
                return response;
            }
            catch (err) {
                spinner && spinner.stopAndPersist({ symbol: chalk_1.default.red('✖'), text: chalk_1.default.red('GET: ') + chalk_1.default.gray(data) });
                process.stdout.write('\n' + chalk_1.default.red('Error: ') + chalk_1.default.yellow(err.message) + '\n');
                return;
            }
        }
        else {
            const resolvedPath = path.resolve(root, data);
            if (!fs.existsSync(resolvedPath)) {
                process.stdout.write('\n' + chalk_1.default.red('Invalid Path: ') + chalk_1.default.yellow(resolvedPath) + '\n');
                return;
            }
            return resolvedPath;
        }
    }
    catch (err) {
        console.error(chalk_1.default.red(err.message));
        return {};
    }
});
const uncaughtException = (error, fileWatcher) => __awaiter(void 0, void 0, void 0, function* () {
    console.error(chalk_1.default.red('Something went wrong!'), error);
    yield fileWatcher.close();
    process.exit(1);
});
const errorHandler = (fileWatcher) => __awaiter(void 0, void 0, void 0, function* () {
    console.error(chalk_1.default.red('Error, cant read from stdin'));
    console.error(chalk_1.default.red(`Creating a snapshot from the CLI wonn't be possible`));
    yield fileWatcher.close();
    process.exit(1);
});
const getSnapshot = (mockServer, snapshots) => {
    process.stdout.write('\n' + chalk_1.default.gray('Type s + enter at any time to create a snapshot of the database') + '\n');
    process.stdin.on('data', (chunk) => {
        try {
            if (chunk.toString().trim().toLowerCase() !== 's')
                return;
            const filename = `db-${Date.now()}.json`;
            const file = path.join(snapshots, filename);
            const cleanDb = (0, utils_1.getCleanDb)(mockServer.db, mockServer.config.dbMode);
            fs.writeFileSync(file, JSON.stringify(cleanDb, null, 2), 'utf-8');
            console.log(chalk_1.default.green('Saved snapshot to ') + `${path.relative(process.cwd(), file)}\n`);
        }
        catch (err) {
            console.error(chalk_1.default.red(err.message));
        }
    });
};
const startServer = (mockServer, db, launchServerOptions) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const server = yield mockServer.launchServer(db, launchServerOptions);
        return server;
    }
    catch (err) {
        process.exit(1);
    }
});
const restartServer = (mockServer, db, launchServerOptions, changedPath) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        if (!mockServer.server)
            return;
        process.stdout.write(chalk_1.default.yellowBright('\n' + path.relative(process.cwd(), changedPath)) + chalk_1.default.gray(' has changed, reloading...\n'));
        yield __1.default.Destroy(mockServer).then(() => startServer(mockServer, db, launchServerOptions));
    }
    catch (err) {
        console.error(err.message);
        process.exit(1);
    }
});
const init = () => __awaiter(void 0, void 0, void 0, function* () {
    const args = yield (0, argv_1.default)(pkg);
    if (args.init) {
        fsx.copy(path.join(__dirname, '../../samples'), path.resolve(process.cwd()));
        return;
    }
    const { _: [source], db = source, injectors, middlewares, store, rewriters, root, watch, snapshots } = args, configArgs = __rest(args, ["_", "db", "injectors", "middlewares", "store", "rewriters", "root", "watch", "snapshots"]);
    const config = Object.assign(Object.assign({}, configArgs), { root: path.resolve(process.cwd(), root) });
    global.quiet = config.quiet;
    const mockServer = new __1.default(config);
    const _db = yield getDataFromUrl(config.root, db);
    const _middlewares = yield getDataFromUrl(config.root, middlewares);
    const _injectors = yield getDataFromUrl(config.root, injectors);
    const _store = yield getDataFromUrl(config.root, store);
    const _rewriters = yield getDataFromUrl(config.root, rewriters);
    const launchServerOptions = {
        injectors: _injectors,
        middlewares: _middlewares,
        rewriters: _rewriters,
        store: _store,
    };
    yield startServer(mockServer, _db, launchServerOptions);
    let fileWatcher;
    if (watch) {
        const filesToWatch = [_db, _middlewares, _injectors, _store, _rewriters]
            .filter(Boolean)
            .filter((file) => typeof file === 'string')
            .filter((file) => fs.existsSync(file));
        fileWatcher = chokidar_1.default.watch(filesToWatch);
        fileWatcher.on('change', (changedPath) => restartServer(mockServer, _db, launchServerOptions, changedPath));
    }
    getSnapshot(mockServer, snapshots);
    process.on('uncaughtException', (error) => uncaughtException(error, fileWatcher));
    process.stdin.setEncoding('utf8');
    process.stdin.on('error', () => errorHandler(fileWatcher));
});
init();
