/// <reference types="node" />
import axios from 'axios';
import chalk from 'chalk';
import * as watcher from 'chokidar';
import express from 'express';
import type { Server } from 'http';
import * as _ from 'lodash';
import * as nanoid from 'nanoid';
import ora from 'ora';
import * as pathToRegexp from 'path-to-regexp';
import { GettersSetters } from './getters-setters';
import type { LaunchServerOptions, ResourceOptions, ResourceReturns, RewriterOptions } from './types/common.types';
import type * as ParamTypes from './types/param.types';
import type * as UserTypes from './types/user.types';
import type * as ValidTypes from './types/valid.types';
export declare class MockServer extends GettersSetters {
    #private;
    static Create: (config?: ParamTypes.Config) => MockServer;
    static Destroy: (mockServer?: MockServer) => Promise<undefined>;
    launchServer(db?: ParamTypes.Db, { middlewares, injectors, rewriters, store, router, app, log }?: LaunchServerOptions): Promise<Server | undefined>;
    defaults(options?: UserTypes.Config, { root, log, }?: {
        root?: string;
        log?: boolean | string;
    }): express.Router[];
    rewriter(rewriters?: ParamTypes.Rewriters, { root, router, log }?: RewriterOptions): express.Router;
    resources(db?: ParamTypes.Db, { middlewares, injectors, reverse, root, dbMode, router, log, }?: ResourceOptions): ResourceReturns;
    withHelperWrappers: (middlewares?: UserTypes.MiddlewareConfig | UserTypes.MiddlewareConfig[]) => any[];
    startServer(port?: number, host?: string): Promise<Server | undefined>;
    stopServer(): Promise<boolean>;
    resetServer(): void;
    pageNotFound: (_req: any, _res: any, next: any) => void;
    errorHandler: (err: any, _req: any, res: any, next: any) => any;
    resetDb(ids?: string[], routePaths?: string[]): ValidTypes.Db;
    homePage({ log }?: {
        log?: boolean;
    }): express.Router;
}
export { express, _ as lodash, nanoid, ora as spinner, pathToRegexp, chalk, axios, watcher };
export default MockServer;
