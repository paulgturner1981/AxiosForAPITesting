"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._IterateResponse = void 0;
const chalk_1 = __importDefault(require("chalk"));
const _ = __importStar(require("lodash"));
const _IterateResponse = (_req, res, next) => {
    var _a;
    const storeKey = '_IterateResponse';
    const locals = res.locals;
    const routeConfig = locals.routeConfig;
    routeConfig.store = _.isPlainObject(routeConfig.store) ? routeConfig.store : {};
    const store = routeConfig.store || {};
    if (!Array.isArray(locals.data)) {
        console.error(chalk_1.default.red('To use ') + chalk_1.default.yellowBright('_IterateResponse') + chalk_1.default.red(' method the data must be of type Array'));
        return next();
    }
    if (!((_a = store[storeKey]) === null || _a === void 0 ? void 0 : _a.nextIndex) || store[storeKey].nextIndex > locals.data.length - 1) {
        store[storeKey] = { currentIndex: -1, nextIndex: 0 };
    }
    locals.data = locals.data[store[storeKey].nextIndex];
    store[storeKey].currentIndex++;
    store[storeKey].nextIndex++;
    next();
};
exports._IterateResponse = _IterateResponse;
