/// <reference types="node" />
import express from 'express';
import type { Server } from 'http';
import type { GetData, SetData, SetterOptions } from './types/common.types';
import type * as Params from './types/param.types';
import type * as ValidTypes from './types/valid.types';
export declare class GettersSetters {
    #private;
    port: number | undefined;
    server: Server | undefined;
    address: string | undefined;
    listeningTo: string | undefined;
    app: express.Application;
    routes: string[];
    rewriterRoutes: string[];
    initialDb: ValidTypes.Db;
    constructor(config?: Params.Config);
    get config(): ValidTypes.Config;
    get db(): ValidTypes.Db;
    get middlewares(): ValidTypes.Middlewares;
    get injectors(): ValidTypes.Injectors;
    get rewriters(): import("./types/common.types").RoutePairs;
    get store(): object;
    get data(): GetData;
    getDb: (routePath?: string | string[]) => ValidTypes.RouteConfig | ValidTypes.Db;
    getRewriters: () => import("./types/common.types").RoutePairs;
    getStore: () => object;
    protected _getServerDetails: () => {
        app: express.Application;
        data: GetData;
        getDb: (routePath?: string | string[]) => ValidTypes.RouteConfig | ValidTypes.Db;
        getStore: () => object;
        routes: string[];
    };
    init(): void;
    clearServerAddress(): void;
    setDefaults(): void;
    setDefaultData(): void;
    setData(data?: SetData, options?: SetterOptions): void;
    setDefaultConfig(): void;
    setConfig(config?: Params.Config, { root, merge, log }?: SetterOptions): void;
    setDefaultDb(): void;
    setDefaultMiddlewares(): void;
    setMiddlewares(middleware?: Params.Middlewares, { root, merge, log }?: SetterOptions): void;
    setDefaultInjectors(): void;
    setInjectors(injectors?: Params.Injectors, { root, merge, log }?: SetterOptions): void;
    setDefaultRewriters(): void;
    setDefaultStore(): void;
    setStore(store?: Params.Store, { root, merge, log }?: SetterOptions): void;
    createExpressApp(app?: express.Application): express.Application;
}
