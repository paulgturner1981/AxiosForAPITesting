"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _GettersSetters_instances, _GettersSetters_config, _GettersSetters_db, _GettersSetters_middlewares, _GettersSetters_injectors, _GettersSetters_rewriters, _GettersSetters_store, _GettersSetters_suppressTerminalLogs, _GettersSetters_suppressLogs;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GettersSetters = void 0;
const chalk_1 = __importDefault(require("chalk"));
const express_1 = __importDefault(require("express"));
const _ = __importStar(require("lodash"));
const Defaults = __importStar(require("./defaults"));
const validators_1 = require("./utils/validators");
const ora_1 = __importDefault(require("ora"));
class GettersSetters {
    constructor(config) {
        _GettersSetters_instances.add(this);
        _GettersSetters_config.set(this, void 0);
        _GettersSetters_db.set(this, void 0);
        _GettersSetters_middlewares.set(this, void 0);
        _GettersSetters_injectors.set(this, void 0);
        _GettersSetters_rewriters.set(this, void 0);
        _GettersSetters_store.set(this, void 0);
        this.getDb = (routePath) => {
            if (!routePath)
                return __classPrivateFieldGet(this, _GettersSetters_db, "f");
            const routePaths = [].concat(routePath);
            if (routePaths.length === 1)
                return __classPrivateFieldGet(this, _GettersSetters_db, "f")[routePaths[0]];
            return routePaths.reduce((res, route) => {
                return __classPrivateFieldGet(this, _GettersSetters_db, "f")[route] ? Object.assign(Object.assign({}, res), { [route]: __classPrivateFieldGet(this, _GettersSetters_db, "f")[route] }) : res;
            }, {});
        };
        this.getRewriters = () => __classPrivateFieldGet(this, _GettersSetters_rewriters, "f");
        this.getStore = () => __classPrivateFieldGet(this, _GettersSetters_store, "f");
        this._getServerDetails = () => ({
            app: this.app,
            data: this.data,
            getDb: this.getDb,
            getStore: this.getStore,
            routes: this.routes,
        });
        global.quiet = typeof config === 'object' ? config.quiet : false;
        __classPrivateFieldGet(this, _GettersSetters_instances, "m", _GettersSetters_suppressTerminalLogs).call(this); // Suppress terminal logs on testing environments
        __classPrivateFieldGet(this, _GettersSetters_instances, "m", _GettersSetters_suppressLogs).call(this, global.quiet); // Suppress console logs if quiet is set to true
        console.log(chalk_1.default.blueBright('\n{^_^}/~ Hi!'));
        this.init();
        config && this.setConfig(config);
    }
    get config() {
        return _.cloneDeep(__classPrivateFieldGet(this, _GettersSetters_config, "f"));
    }
    get db() {
        return _.cloneDeep(__classPrivateFieldGet(this, _GettersSetters_db, "f"));
    }
    get middlewares() {
        return _.cloneDeep(__classPrivateFieldGet(this, _GettersSetters_middlewares, "f"));
    }
    get injectors() {
        return _.cloneDeep(__classPrivateFieldGet(this, _GettersSetters_injectors, "f"));
    }
    get rewriters() {
        return _.cloneDeep(__classPrivateFieldGet(this, _GettersSetters_rewriters, "f"));
    }
    get store() {
        return _.cloneDeep(__classPrivateFieldGet(this, _GettersSetters_store, "f"));
    }
    get data() {
        return {
            config: this.config,
            db: this.db,
            injectors: this.injectors,
            middlewares: this.middlewares,
            rewriters: this.rewriters,
            store: this.store,
        };
    }
    init() {
        this.clearServerAddress();
        this.createExpressApp();
        this.setDefaults();
    }
    clearServerAddress() {
        this.port = undefined;
        this.server = undefined;
        this.address = undefined;
        this.listeningTo = undefined;
    }
    setDefaults() {
        this.setDefaultConfig();
        this.setDefaultDb();
        this.setDefaultMiddlewares();
        this.setDefaultInjectors();
        this.setDefaultRewriters();
        this.setDefaultStore();
    }
    setDefaultData() {
        this.setDefaultConfig();
        this.setDefaultMiddlewares();
        this.setDefaultInjectors();
        this.setDefaultStore();
    }
    setData(data = {}, options = {}) {
        data.config && this.setConfig(data.config, options);
        data.middlewares && this.setMiddlewares(data.middlewares, options);
        data.injectors && this.setInjectors(data.injectors, options);
        data.store && this.setStore(data.store, options);
    }
    setDefaultConfig() {
        __classPrivateFieldSet(this, _GettersSetters_config, _.cloneDeep(Defaults.Config), "f");
    }
    setConfig(config, { root = __classPrivateFieldGet(this, _GettersSetters_config, "f").root, merge, log = this.config.log } = {}) {
        const spinner = !global.quiet && log && (0, ora_1.default)('Loading Config...').start();
        const oldConfig = __classPrivateFieldGet(this, _GettersSetters_config, "f") || Defaults.Config;
        const newConfig = (0, validators_1.getValidConfig)(config, { mockServer: this._getServerDetails(), root });
        __classPrivateFieldSet(this, _GettersSetters_config, merge ? Object.assign(Object.assign(Object.assign({}, Defaults.Config), oldConfig), newConfig) : Object.assign(Object.assign({}, Defaults.Config), newConfig), "f");
        global.quiet = __classPrivateFieldGet(this, _GettersSetters_config, "f").quiet;
        __classPrivateFieldGet(this, _GettersSetters_instances, "m", _GettersSetters_suppressLogs).call(this, __classPrivateFieldGet(this, _GettersSetters_config, "f").quiet);
        spinner && spinner.stopAndPersist({ symbol: '✔', text: chalk_1.default.gray('Config Loaded.') });
    }
    setDefaultDb() {
        __classPrivateFieldSet(this, _GettersSetters_db, _.cloneDeep(Defaults.Db), "f");
        this.initialDb = _.cloneDeep(Defaults.Db);
    }
    setDefaultMiddlewares() {
        __classPrivateFieldSet(this, _GettersSetters_middlewares, _.cloneDeep(Defaults.Middlewares), "f");
    }
    setMiddlewares(middleware, { root = __classPrivateFieldGet(this, _GettersSetters_config, "f").root, merge, log = this.config.log } = {}) {
        const spinner = !global.quiet && log && (0, ora_1.default)('Loading Middlewares...').start();
        const oldMiddlewares = __classPrivateFieldGet(this, _GettersSetters_middlewares, "f");
        const newMiddlewares = (0, validators_1.getValidMiddlewares)(middleware, { mockServer: this._getServerDetails(), root });
        __classPrivateFieldSet(this, _GettersSetters_middlewares, merge ? Object.assign(Object.assign({}, oldMiddlewares), newMiddlewares) : newMiddlewares, "f");
        spinner && spinner.stopAndPersist({ symbol: '✔', text: chalk_1.default.gray('Middlewares Loaded.') });
    }
    setDefaultInjectors() {
        __classPrivateFieldSet(this, _GettersSetters_injectors, _.cloneDeep(Defaults.Injectors), "f");
    }
    setInjectors(injectors, { root = __classPrivateFieldGet(this, _GettersSetters_config, "f").root, merge, log = this.config.log } = {}) {
        const spinner = !global.quiet && log && (0, ora_1.default)('Loading Injectors...').start();
        const oldInjectors = __classPrivateFieldGet(this, _GettersSetters_injectors, "f");
        const newInjectors = (0, validators_1.getValidInjectors)(injectors, { mockServer: this._getServerDetails(), root });
        __classPrivateFieldSet(this, _GettersSetters_injectors, merge ? [...oldInjectors, ...newInjectors] : newInjectors, "f");
        spinner && spinner.stopAndPersist({ symbol: '✔', text: chalk_1.default.gray('Injectors Loaded.') });
    }
    setDefaultRewriters() {
        __classPrivateFieldSet(this, _GettersSetters_rewriters, _.cloneDeep(Defaults.Rewriters), "f");
    }
    setDefaultStore() {
        __classPrivateFieldSet(this, _GettersSetters_store, _.cloneDeep(Defaults.Store), "f");
    }
    setStore(store, { root = __classPrivateFieldGet(this, _GettersSetters_config, "f").root, merge, log = this.config.log } = {}) {
        const spinner = !global.quiet && log && (0, ora_1.default)('Loading Store...').start();
        const oldStore = __classPrivateFieldGet(this, _GettersSetters_store, "f");
        const newStore = (0, validators_1.getValidStore)(store, { mockServer: this._getServerDetails(), root });
        __classPrivateFieldSet(this, _GettersSetters_store, merge ? Object.assign(Object.assign({}, oldStore), newStore) : newStore, "f");
        spinner && spinner.stopAndPersist({ symbol: '✔', text: chalk_1.default.gray('Store Loaded.') });
    }
    createExpressApp(app) {
        this.app = app || (0, express_1.default)().set('json spaces', 2);
        this.routes = [];
        this.rewriterRoutes = [];
        return this.app;
    }
}
exports.GettersSetters = GettersSetters;
_GettersSetters_config = new WeakMap(), _GettersSetters_db = new WeakMap(), _GettersSetters_middlewares = new WeakMap(), _GettersSetters_injectors = new WeakMap(), _GettersSetters_rewriters = new WeakMap(), _GettersSetters_store = new WeakMap(), _GettersSetters_instances = new WeakSet(), _GettersSetters_suppressTerminalLogs = function _GettersSetters_suppressTerminalLogs() {
    if (process.env.NODE_ENV === 'test') {
        global.originalWrite = process.stdout.write;
        process.stdout.write = () => false;
    }
    else {
        if (global.originalWrite) {
            process.stdout.write = global.originalWrite;
        }
    }
}, _GettersSetters_suppressLogs = function _GettersSetters_suppressLogs(quiet) {
    if (quiet) {
        if (!global.consoleOriginal)
            global.consoleOriginal = Object.assign({}, global.console);
        global.console = Object.assign(Object.assign({}, global.console), { log: () => { }, warn: () => { } });
    }
    else {
        if (global.consoleOriginal)
            global.console = Object.assign({}, global.consoleOriginal);
        delete global.consoleOriginal;
    }
};
